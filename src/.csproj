<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), .pre.props))\.pre.props" />
  <Import Project="$(ExtDir)ci.props" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), .props))\.props" />
  <Import Project="$(ExtDir)empty.targets" />
  <Import Project="$(ExtDir)proxy.targets" />

  <PropertyGroup>
    <ShimVerbosity Condition="'$(ShimVerbosity)'==''">normal</ShimVerbosity>
  </PropertyGroup>

  <!--nice list of build issues: http://xoofx.com/blog/2016/05/11/goodbye-project-json/-->
  <!--see: Google 'MSBuild Reserved Properties' > MSBuildStartupDirectory-->
  <ItemGroup>
    <SolutionFiles Include="$(MSBuildStartupDirectory)\*\**\*.sln" />
    <SolutionDirs Include="@(SolutionFiles->'%(RootDir)%(Directory)')" />
  </ItemGroup>
  <PropertyGroup>
    <ShimInclude>
      $(MSBuildStartupDirectory)\**\*.csproj
    </ShimInclude>
    <ShimExclude>
      @(SolutionDirs->'%(Identity)**');
      $(MSBuildStartupDirectory)\**\android\*.csproj;
      $(MSBuildStartupDirectory)\**\ios\*.csproj;
      $(MSBuildProjectFullPath)
    </ShimExclude>
  </PropertyGroup>
  <ItemGroup>
    <ProjectFiles
      Include="$(ShimInclude)"
      Exclude="$(ShimExclude)"
    />
  </ItemGroup>

  <PropertyGroup>
    <ProxyDependsOn Condition="'$(DefaultsApplied)'==''">
      DumpProjects;
      MetaBuild;
      _TargetPlusDefaults;
      <!--Publish-->
    </ProxyDependsOn>
  </PropertyGroup>

  <Target Name="Proxy" DependsOnTargets="$(ProxyDependsOn)">
    <MSBuild Projects="@(ProjectFiles)" Targets="$(MSBuildTarget)" Condition="'$(DefaultsApplied)'=='true'" />
  </Target>
  
  <Target Name="Restore" DependsOnTargets="$(RestoreDependsOn)" >
    <MSBuild Projects="@(ProjectFiles)" Targets="NugetRestore" Condition="'$(DefaultsApplied)'=='true'" />
  </Target>

  <Target Name="DumpProjects">
    <Message Importance="$(ShimVerbosity)" Text="Include: $(ShimInclude)" />
    <Message Importance="$(ShimVerbosity)" Text="Exclude: $(ShimExclude)" />
    <Message Importance="$(ShimVerbosity)" Text="ProjectFiles:" />
    <Message Importance="$(ShimVerbosity)" Text="  %(ProjectFiles.FullPath)" />
  </Target>

  <!--mbuild command template-->
  <PropertyGroup>
    <BuildTarget>[TARGET]</BuildTarget>

    <CommandTemplate>msbuild $(MSBuildThisFileFullPath)</CommandTemplate>
    <CommandTemplate>$(CommandTemplate) /t:$(BuildTarget)</CommandTemplate>
    <CommandTemplate Condition="'$(Properties)'!=''">$(CommandTemplate) /p:$(Properties)</CommandTemplate>
    <CommandTemplate>$(CommandTemplate) $(DefaultArgs)</CommandTemplate>
  </PropertyGroup>

  <Target Name="_RestorePlusDefaults">
    
    <PropertyGroup>
      <_BuildLogFileType>build.restore</_BuildLogFileType>

      <_BuildLogFile>$(BuildLogFile.Replace("$(BuildLogPrefix)", "$(_BuildLogFileType)"))</_BuildLogFile>

      <_CommandLine>$(CommandTemplate)</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildLogPrefix)", "$(_BuildLogFileType)"))</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildTarget)", "Restore"))</_CommandLine>

      <!--prevent importing target files which have yet to be restored from nuget-->
      <_CommandLine>$(_CommandLine) /p:SkipNugetImports=true</_CommandLine>
    </PropertyGroup>

    <MakeDir Directories="$(BuildLogDir)" />
    
    <!--save previous build logs-->
    <ItemGroup>
      <_PreviousLogs 
        Include="$(BuildLogDir)*$(_BuildLogFileType)*" 
        Exclude="$(BuildLogDir)*$(_BuildLogFileType)*previous*" 
      />
    </ItemGroup>
    <Copy
      SourceFiles="@(_PreviousLogs)"
      DestinationFiles="@(_PreviousLogs->'%(Identity).previous')"
    />
    
    <Message Importance="high" Text="Restore (online) -> $(_BuildLogFile)" />
    <Exec Command="$(_CommandLine)" WorkingDirectory="$(MSBuildStartupDirectory)" />
  </Target>

  <Target 
    Name="_TargetPlusDefaults" 
    DependsOnTargets="_RestorePlusDefaults">

    <PropertyGroup>
      <_BuildLogFileType>build.core</_BuildLogFileType>
      
      <_BuildLogFile>$(BuildLogFile.Replace("$(BuildLogPrefix)", "$(_BuildLogFileType)"))</_BuildLogFile>
      
      <_CommandLine>$(CommandTemplate)</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildLogPrefix)", "$(_BuildLogFileType)"))</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildTarget)", "Main"))</_CommandLine>
      <_CommandLine>$(_CommandLine) /p:MSBuildTarget=$(MSBuildTarget)</_CommandLine>
    </PropertyGroup>
    
    <MakeDir Directories="$(BuildLogDir)" />
    
    <!--save previous build logs-->
    <ItemGroup>
      <_PreviousLogs
        Include="$(BuildLogDir)*$(_BuildLogFileType)*"
        Exclude="$(BuildLogDir)*$(_BuildLogFileType)*previous*"
      />
    </ItemGroup>
    <Copy
      SourceFiles="@(_PreviousLogs)"
      DestinationFiles="@(_PreviousLogs->'%(Identity).previous')"
    />

    <!--<Warning Text="iosServerAddress not specified" Condition="'$(iosServerAddress)'==''"/>
    <Warning Text="iosServerUser not specified" Condition="'$(iosServerUser)'==''"/>
    <Warning Text="iosServerPassword not specified" Condition="'$(iosServerPassword)'==''"/>-->

    <!--execute-->
    <Message Importance="high" Text="Build (offline) -> $(_BuildLogFile)" />
    <Exec Command="$(_CommandLine)" WorkingDirectory="$(MSBuildStartupDirectory)" />
  </Target>

  <Import Project="$(ExtDir)ci.shell.targets" />
  <Import Project="$(ExtDir)ci.meta.targets" />
  <Import Project="$(ExtDir)ci.common.targets" />
  <Import
    Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(ProjDir), .targets))\.targets"
    Condition="'$(DefaultsApplied)'==''"
  />
  
</Project>