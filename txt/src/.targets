<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory)\.., .targets))\.targets" />

  <!--quitely force removal of only ignored files including directories-->
  <Target Name="Clean">
    <PropertyGroup>
      <CleanCommand>git clean -fdXq</CleanCommand>
      <CleanMessage>$(MSBuildProjectName) x-> </CleanMessage>
    </PropertyGroup>
    
    <Message Importance="high" Text="$(CleanMessage)$(OutDirAbsolute)"/>
    <Exec Command="$(CleanCommand) $(OutDirAbsolute)"/>
    
    <Message Importance="high" Text="$(CleanMessage)$(IntermediateOutputPathAbsolute)"/>
    <Exec Command="$(CleanCommand) $(IntermediateOutputPathAbsolute)"/>
  </Target>

  <!--build task assembly before anything else-->
  <Target
    Name="BuildTaskProject"
    BeforeTargets="BeforeResolveReferences"
    Condition="'@(NugetPackage)'!='' AND '$(BuildingInsideVisualStudio)'!='true'" >
    <!--Can't figure out why build project gets touched when solutions is loaded in VS-->
    
    <MSBuild
      Projects="$(SrcDir)build\dev\Build\Build.csproj"
      Targets="Build"
    />
  </Target>

  <!--download nuget.exe-->
  <Target
    Name="DownloadNugetExe"
    DependsOnTargets="BuildTaskProject"
    BeforeTargets="BeforeResolveReferences"
    Condition="'@(NugetPackage)'!='' AND !Exists($(NugetExe))"
  >
    <Message Importance="high" Text="Download nuget.exe -> $(ToolsDir)" />
    <WebCopy SourceUrls="$(NugetExeUrl)" DestinationFolder="$(ToolsDir)"/>
  </Target>
  
  <!--nuget restore-->
  <Target
    Name="NugetRestore"
    Inputs="@(NugetPackage->'$(NugetPackagesDir).config\%(Identity)\packages.config')"
    Outputs="$(NugetPackagesDir).config\%(Identity)\packages.config"
    DependsOnTargets="DownloadNugetExe"
    BeforeTargets="BeforeResolveReferences">

    <!--ensure directory for packages.config exists-->
    <ItemGroup>
      <NugetTempConfigFile Include="$(TempDir).config\%(NugetPackage.Identity)\packages.config" />
    </ItemGroup>
    <MakeDir Directories="@(NugetTempConfigFile->'%(RootDir)%(Directory)')" />

    <!--emit packages.config file-->
    <PropertyGroup>
      <NugetPackageAttributes>id='%(NugetPackage.Identity)' version='%(Version)'</NugetPackageAttributes>
      <NugetPackageAttributes Condition="'%(NugetPackage.TargetFramework)'!=''"
        >$(NugetPackageAttributes) targetFramework='%(TargetFramework)'</NugetPackageAttributes>
      <NugetPackageElement>&lt;package $(NugetPackageAttributes)/&gt;</NugetPackageElement>
      <NugetPackageXml>&lt;packages&gt;$(NugetPackageElement)&lt;/packages&gt;</NugetPackageXml>
    </PropertyGroup>
    <WriteLinesToFile
      File="@(NugetTempConfigFile)"
      Lines="$(NugetPackageXml)"
      Overwrite="true"
      Encoding="Unicode"
    />

    <!--execute nuget restore command-->
    <PropertyGroup>
      <NugetRestoreExecVerbosity>quiet</NugetRestoreExecVerbosity>
      <NugetRestoreExecVerbosity Condition="'$(NugetRestoreVerbosity)'=='high'" >normal</NugetRestoreExecVerbosity>

      <NugetRestoreExec>$(NugetExe) restore</NugetRestoreExec>
      <NugetRestoreExec>$(NugetRestoreExec) -OutputDirectory $(NugetPackagesDirAbsolute)</NugetRestoreExec>
      <NugetRestoreExec>$(NugetRestoreExec) -Source $(NugetSource)</NugetRestoreExec>
      <NugetRestoreExec>$(NugetRestoreExec) -Verbosity $(NugetRestoreExecVerbosity)</NugetRestoreExec>
    </PropertyGroup>
    <Exec Command="$(NugetRestoreExec) @(NugetTempConfigFile)" />

    <!--config file doubles as task input/output-->
    <PropertyGroup>
      <NugetConfigFile>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\$(NugetPackagesDir).config\%(NugetPackage.Identity)\packages.config'))</NugetConfigFile>
    </PropertyGroup>
    <Message Importance="high" Text="Download %(NugetPackage.Identity) -> $(NugetConfigFile)" />
    <Copy 
      SourceFiles="@(NugetTempConfigFile)" 
      DestinationFiles="$(NugetPackagesDirAbsolute).config\%(NugetPackage.Identity)\packages.config" 
    />
  </Target>

  <!--
  <Target Name="_MakeOutJunctions" AfterTargets="Build">
    <Exec Command="mklink /J bin $(OutDir) >NUL" Condition="!Exists(bin)" WorkingDirectory="$(MSBuildProjectDirectory)" />
    <Exec Command="mklink /J obj $(IntermediateOutputPath) >NUL" Condition="!Exists(obj)" WorkingDirectory="$(MSBuildProjectDirectory)" />
  </Target>
  -->
  
  <!--Force android projects to package and sign during build instead of deploy.-->
  <Target
    Name="_AndroidPackageAndSign"
    AfterTargets="Build"
    Condition="'$(ProjectTypeName)'=='Android' AND '$(AndroidApplication)'=='true'">

    <PropertyGroup>
      <ApkPath>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\$(OutDir)'))$(projectName)</ApkPath>
    </PropertyGroup>
    
    <Message Text="$(ProjectName).apk -&gt; $(ApkPath).apk" Importance="high" />
    <CallTarget Targets="Package"/>

    <Message Text="$(ProjectName)-Signed.apk -&gt; $(ApkPath)-Signed.apk" Importance="high" />
    <CallTarget Targets="Sign"/>
  </Target>
  
</Project>