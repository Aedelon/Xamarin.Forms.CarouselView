<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), .props))\.props" />

  <!--see: Google 'MSBuild Reserved Properties' > MSBuildStartupDirectory-->
  <ItemGroup>
    <ProjectFiles
      Include="$(MSBuildStartupDirectory)\**\*.csproj"
      Exclude="$(GlobalExclude);$(MSBuildProjectFullPath)"
    />
  </ItemGroup>
  
  <!--
  Nuget restore may download target files that msbuild needs to include. This is problematic as msbuild will not 
  execute any targets (like a nuget restore) until all includes have been processed. Therefore nuget restore cannot 
  be done in the same msbuild process as the actual build (or clean). Instead, this file acts as a shim which executes
  different msbuild processes for online and offline tasks (e.g. nuget restore vs build). In this way, any targets 
  downloaded by nuget restore can be present when the build (or clean) executes. 
  -->
  <Target Name="Restore" DependsOnTargets="$(RestoreDependsOn)" >
    <MSBuild Projects="@(ProjectFiles)" Targets="NugetRestore" Condition="'$(DefaultsApplied)'=='true'" />
  </Target>

  <Target Name="Main" DependsOnTargets="$(MainDependsOn)">
    <MSBuild Projects="@(ProjectFiles)" Targets="$(MSBuildTarget)" Condition="'$(DefaultsApplied)'=='true'" />
  </Target>

  <Target Name="_DumpProjects">
    <Message Text="ProjectFiles:" />
    <Message Text="  %(ProjectFiles.FullPath)" />
  </Target>

  <PropertyGroup>
    <RestoreDependsOn Condition="'$(DefaultsApplied)'==''" >
      _DumpProjects;
      _RestorePlusDefaults
    </RestoreDependsOn>
    <MainDependsOn Condition="'$(DefaultsApplied)'==''">
      _DumpProjects;
      _GenerateBuildGitStatus;
      _GenerateBuildGitHash;
      _GenerateBuildNumber;
      _TargetPlusDefaults;
      <!--Publish-->
    </MainDependsOn>
  </PropertyGroup>

  <!--drop-->
  <PropertyGroup>
    <DropHashDir>$(DropDir)hash\</DropHashDir>
    <DropNumberDir>$(DropDir)number\</DropNumberDir>
    <DropVersionDir>$(DropDir)version\</DropVersionDir>
  </PropertyGroup>

  <!--mbuild command template-->
  <PropertyGroup>
    <BuildTarget>[TARGET]</BuildTarget>

    <CommandTemplate>msbuild $(MSBuildThisFileFullPath)</CommandTemplate>
    <CommandTemplate>$(CommandTemplate) /t:$(BuildTarget)</CommandTemplate>
    <CommandTemplate>$(CommandTemplate) $(Args)</CommandTemplate>
    <CommandTemplate>$(CommandTemplate) "/p:Args=$(Args)"</CommandTemplate>
    <CommandTemplate>$(CommandTemplate) $(DefaultArgs)</CommandTemplate>
  </PropertyGroup>
  
  <Target Name="_RestorePlusDefaults">
    
    <PropertyGroup>
      <_LogFileType>.restore</_LogFileType>
      <_CommandLine>$(CommandTemplate)</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildLogFileType)", "$(_LogFileType)"))</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildTarget)", "Restore"))</_CommandLine>

      <!--prevent importing target files which have yet to be restored from nuget-->
      <_CommandLine>$(_CommandLine) /p:SkipNugetImports=true</_CommandLine>
    </PropertyGroup>

    <MakeDir Directories="$(BuildLogDir)" />
    
    <Message Importance="high" Text="Restore (online)" />
    <Exec Command="$(_CommandLine)" WorkingDirectory="$(MSBuildStartupDirectory)" />
  </Target>

  <Target 
    Name="_TargetPlusDefaults" 
    DependsOnTargets="_RestorePlusDefaults">
    
    <PropertyGroup>
      <_LogFileType></_LogFileType>
      <_CommandLine>$(CommandTemplate)</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildLogFileType)", "$(_LogFileType)"))</_CommandLine>
      <_CommandLine>$(_CommandLine.Replace("$(BuildTarget)", "Main"))</_CommandLine>
      <_CommandLine>$(_CommandLine) /p:Configuration=$(Configuration)</_CommandLine>
      <_CommandLine>$(_CommandLine) /p:MSBuildTarget=$(MSBuildTarget)</_CommandLine>
    </PropertyGroup>

    <!--<Warning Text="iosServerAddress not specified" Condition="'$(iosServerAddress)'==''"/>
    <Warning Text="iosServerUser not specified" Condition="'$(iosServerUser)'==''"/>
    <Warning Text="iosServerPassword not specified" Condition="'$(iosServerPassword)'==''"/>-->

    <!--execute-->
    <Message Importance="high" Text="Build (offline)" />
    <Exec Command="$(_CommandLine)" WorkingDirectory="$(MSBuildStartupDirectory)" />
  </Target>

  <Target Name="_GenerateBuildGitStatus">

    <!--capture git status-->
    <Message Text="%(FileName) -> @(BuildGitStatusFile)" />
    <MakeDir Directories="@(BuildGitStatusFile->'%(RootDir)%(Directory)')" />
    <Exec
      Command="git status --porcelain > @(BuildGitStatusFile)"
      WorkingDirectory="$(rootDir)"
    />

    <!--check if git is clean-->
    <ReadLinesFromFile File="@(BuildGitStatusFile)">
      <Output TaskParameter="Lines" ItemName="_GitStatusFileLines" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <_GitIsClean Condition="@(_GitStatusFileLines->Count()) == 0">true</_GitIsClean>
    </PropertyGroup>
    <Warning Text="Repository contains modified, new, or untracked files." Condition="'$(_GitIsClean)'!='true'" />
  </Target>

  <Target Name="_GenerateBuildGitHash">
    <ItemGroup>
      <_BuildGitHashFileNext Include="@(BuildGitHashFile->'%(Identity).next')" />
    </ItemGroup>
    
    <!--next git hash-->
    <Exec
      Command="git rev-list -n 1 head > @(_BuildGitHashFileNext)"
      WorkingDirectory="$(rootDir)"
    />
    <ReadLinesFromFile File="@(_BuildGitHashFileNext)" >
      <Output TaskParameter="Lines" ItemName="_BuildGitHashNext" />
    </ReadLinesFromFile>
    <Message Text="Current git hash: @(_BuildGitHashNext)" />

    <!--previous git hash-->
    <ReadLinesFromFile 
      File="@(BuildGitHashFile)"
      Condition="Exists(@(BuildGitHashFile))"
    >
      <Output TaskParameter="Lines" ItemName="_BuildGitHashPrevious" />
    </ReadLinesFromFile>
    <Message Text="Previous git hash: @(_BuildGitHashPrevious)" />
    
    <!--record git hash-->
    <PropertyGroup>
      <_BuildGitHashStale Condition="'@(_BuildGitHashNext)'!='@(_BuildGitHashPrevious)'">true</_BuildGitHashStale>
    </PropertyGroup>
    <Message Text="%(FileName) -&gt; @(BuildGitHashFile)" Condition="'$(_BuildGitHashStale)'=='true'" />
    <MakeDir Directories="@(BuildGitHashFile->'%(RootDir)%(Directory)')" />
    <WriteLinesToFile
      File="@(BuildGitHashFile)"
      Condition="'$(_BuildGitHashStale)'=='true'"
      Overwrite="true"
      Lines="@(_BuildGitHashNext)"
    />
    <Delete Files="@(_BuildGitHashFileNext)" />
  </Target>

  <Target Name="_GenerateBuildNumber">

    <!--default drop dir-->
    <MakeDir Directories="$(DropNumberDir)10000" Condition="!Exists($(DropNumberDir))" />

    <!--next build number-->
    <ItemGroup>
      <_BuildDir Include="$([System.IO.Directory]::GetDirectories($(DropNumberDir)))" />
      <_BuildNumbers Include="@(_BuildDir->'%(FileName)')" />
    </ItemGroup>
    <PropertyGroup>
      <_BuildNumbers>@(_BuildNumbers->Reverse())</_BuildNumbers>
      <_BuildNumber>$(_BuildNumbers.Split(';')[0])</_BuildNumber>
      <_BuildNumber>$([MSBuild]::Add(1, $(_BuildNumber)))</_BuildNumber>
    </PropertyGroup>

    <!--previous build number-->
    <ReadLinesFromFile 
      File="@(BuildNumberFile)"
      Condition="Exists(@(BuildNumberFile))"
    >
      <Output TaskParameter="Lines" ItemName="_BuildNumberPrevious" />
    </ReadLinesFromFile>

    <!--record build number-->
    <PropertyGroup>
      <_BuildNumberStale Condition="'$(_BuildNumber)'!='@(_BuildNumberPrevious)'">true</_BuildNumberStale>
    </PropertyGroup>
    <MakeDir Directories="@(BuildNumberFile->'%(RootDir)%(Directory)')" />
    <Message Text="%(FileName) -> @(BuildNumberFile)" Condition="'$(_BuildNumberStale)'=='true'" />    
    <WriteLinesToFile
      File="@(BuildNumberFile)" 
      Lines="$(_BuildNumber)" 
      Overwrite="true"
      Condition="'$(_BuildNumberStale)'=='true'"
    />
  </Target>

  <Target Name="Publish" >
    <Message Text="DropDir -> $(DropDir)" />

    <!--read git revision-->
    <PropertyGroup>
      <_PublishRevisionDir>$(DropHashDir)$(GitRevision)\</_PublishRevisionDir>
    </PropertyGroup>
    <Message Importance="high" Text="Publish by Hash -> $(_PublishRevisionDir)" />
    <Error Condition="Exists($(_PublishRevisionDir))" Text="Publish directory exists: $(_PublishRevisionDir)" />

    <!--compute build number-->
    <ItemGroup>
      <_BuildDir Include="$([System.IO.Directory]::GetDirectories($(DropNumberDir)))" />
      <_BuildNumbers Include="@(_BuildDir->'%(FileName)')" />
    </ItemGroup>
    <PropertyGroup>
      <_BuildNumbers>@(_BuildNumbers->Reverse())</_BuildNumbers>
      <_BuildNumber>$(_BuildNumbers.Split(';')[0])</_BuildNumber>
      <_BuildNumber>$([MSBuild]::Add(1, $(_BuildNumber)))</_BuildNumber>
      <_BuildDir>$(DropDir)build\$(_BuildNumber)\</_BuildDir>
    </PropertyGroup>
    <Exec Command="mklink /J $(_BuildDir) $(_PublishRevisionDir) >NUL" />
    <Message Importance="high" Text="Publish by Number -> $(_BuildDir) => $(_PublishRevisionDir)" />

    <!--copy build-->
    <ItemGroup>
      <_DropFiles Include="$(BuildDir)**" />
    </ItemGroup>
    <Copy SourceFiles="@(_DropFiles)" DestinationFolder="$(_PublishRevisionDir)%(RecursiveDir)" />
  </Target>

  <Import
    Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), .targets))\.targets"
    Condition="'$(DefaultsApplied)'==''"
  />
  
</Project>